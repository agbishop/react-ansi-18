{
  "data": "travis_fold:start:worker_info\n\u001B[0K\u001B[33;1mWorker information\u001B[0m\nhostname: 310b12d2-5e35-4987-b63b-decbda04c479@1.worker-org-7d4f67b9bb-g8p5z.gce-production-1\nversion: v6.2.1 https://github.com/travis-ci/worker/tree/4e3246c044eb4915c2378ffacd0b3d3ed0136bba\ninstance: travis-job-8ee06938-1dbe-4011-b482-63e70f6d98ce travis-ci-sardonyx-xenial-1553530528-f909ac5 (via amqp)\nstartup: 6.544160285s\ntravis_fold:end:worker_info\n\u001B[0Ktravis_time:start:0b17c10b\n\u001B[0Ktravis_time:end:0b17c10b:start=1572495219819491241,finish=1572495220032988650,duration=213497409,event=no_world_writable_dirs\n\u001B[0Ktravis_time:start:0fa2d8f8\n\u001B[0Ktravis_time:end:0fa2d8f8:start=1572495220036813478,finish=1572495220044479275,duration=7665797,event=setup_filter\n\u001B[0Ktravis_time:start:0df76db4\n\u001B[0Ktravis_time:end:0df76db4:start=1572495220050182864,finish=1572495220060501046,duration=10318182,event=agent\n\u001B[0Ktravis_time:start:236bdf28\n\u001B[0Ktravis_time:end:236bdf28:start=1572495220064327597,finish=1572495220066936331,duration=2608734,event=check_unsupported\n\u001B[0Ktravis_time:start:01f5f45f\n\u001B[0Ktravis_fold:start:system_info\n\u001B[0K\u001B[33;1mBuild system information\u001B[0m\nBuild language: node_js\nBuild group: stable\nBuild dist: xenial\nBuild id: 605325755\nJob id: 605325756\nRuntime kernel version: 4.15.0-1028-gcp\ntravis-build version: a91ac50bd\n\u001B[34m\u001B[1mBuild image provisioning date and time\u001B[0m\nMon Mar 25 16:43:24 UTC 2019\n\u001B[34m\u001B[1mOperating System Details\u001B[0m\nDistributor ID:\tUbuntu\nDescription:\tUbuntu 16.04.6 LTS\nRelease:\t16.04\nCodename:\txenial\n\u001B[34m\u001B[1mSystemd Version\u001B[0m\nsystemd 229\n\u001B[34m\u001B[1mCookbooks Version\u001B[0m\n42e42e4 https://github.com/travis-ci/travis-cookbooks/tree/42e42e4\n\u001B[34m\u001B[1mgit version\u001B[0m\ngit version 2.21.0\n\u001B[34m\u001B[1mbash version\u001B[0m\nGNU bash, version 4.3.48(1)-release (x86_64-pc-linux-gnu)\n\u001B[34m\u001B[1mgcc version\u001B[0m\ngcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\n\u001B[34m\u001B[1mdocker version\u001B[0m\nClient:\n Version:           18.06.0-ce\n API version:       1.38\n Go version:        go1.10.3\n Git commit:        0ffa825\n Built:             Wed Jul 18 19:11:02 2018\n OS/Arch:           linux/amd64\n Experimental:      false\n\nServer:\n Engine:\n  Version:          18.06.0-ce\n  API version:      1.38 (minimum version 1.12)\n  Go version:       go1.10.3\n  Git commit:       0ffa825\n  Built:            Wed Jul 18 19:09:05 2018\n  OS/Arch:          linux/amd64\n  Experimental:     false\n\u001B[34m\u001B[1mclang version\u001B[0m\nclang version 7.0.0 (tags/RELEASE_700/final)\n\u001B[34m\u001B[1mjq version\u001B[0m\njq-1.5\n\u001B[34m\u001B[1mbats version\u001B[0m\nBats 0.4.0\n\u001B[34m\u001B[1mshellcheck version\u001B[0m\n0.6.0\n\u001B[34m\u001B[1mshfmt version\u001B[0m\nv2.6.3\n\u001B[34m\u001B[1mccache version\u001B[0m\n3.2.4\n\u001B[34m\u001B[1mcmake version\u001B[0m\ncmake version 3.12.4\n\u001B[34m\u001B[1mheroku version\u001B[0m\nheroku/7.22.7 linux-x64 node-v11.10.1\n\u001B[34m\u001B[1mimagemagick version\u001B[0m\nVersion: ImageMagick 6.8.9-9 Q16 x86_64 2018-09-28 http://www.imagemagick.org\n\u001B[34m\u001B[1mmd5deep version\u001B[0m\n4.4\n\u001B[34m\u001B[1mmercurial version\u001B[0m\nversion 4.8\n\u001B[34m\u001B[1mmysql version\u001B[0m\nmysql  Ver 14.14 Distrib 5.7.25, for Linux (x86_64) using  EditLine wrapper\n\u001B[34m\u001B[1mopenssl version\u001B[0m\nOpenSSL 1.0.2g  1 Mar 2016\n\u001B[34m\u001B[1mpacker version\u001B[0m\n1.3.3\n\u001B[34m\u001B[1mpostgresql client version\u001B[0m\npsql (PostgreSQL) 10.7 (Ubuntu 10.7-1.pgdg16.04+1)\n\u001B[34m\u001B[1mragel version\u001B[0m\nRagel State Machine Compiler version 6.8 Feb 2013\n\u001B[34m\u001B[1msudo version\u001B[0m\n1.8.16\n\u001B[34m\u001B[1mgzip version\u001B[0m\ngzip 1.6\n\u001B[34m\u001B[1mzip version\u001B[0m\nZip 3.0\n\u001B[34m\u001B[1mvim version\u001B[0m\nVIM - Vi IMproved 7.4 (2013 Aug 10, compiled Nov 24 2016 16:44:48)\n\u001B[34m\u001B[1miptables version\u001B[0m\niptables v1.6.0\n\u001B[34m\u001B[1mcurl version\u001B[0m\ncurl 7.47.0 (x86_64-pc-linux-gnu) libcurl/7.47.0 GnuTLS/3.4.10 zlib/1.2.8 libidn/1.32 librtmp/2.3\n\u001B[34m\u001B[1mwget version\u001B[0m\nGNU Wget 1.17.1 built on linux-gnu.\n\u001B[34m\u001B[1mrsync version\u001B[0m\nrsync  version 3.1.1  protocol version 31\n\u001B[34m\u001B[1mgimme version\u001B[0m\nv1.5.3\n\u001B[34m\u001B[1mnvm version\u001B[0m\n0.34.0\n\u001B[34m\u001B[1mperlbrew version\u001B[0m\n/home/travis/perl5/perlbrew/bin/perlbrew  - App::perlbrew/0.86\n\u001B[34m\u001B[1mphpenv version\u001B[0m\nrbenv 1.1.2\n\u001B[34m\u001B[1mrvm version\u001B[0m\nrvm 1.29.7 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]\n\u001B[34m\u001B[1mdefault ruby version\u001B[0m\nruby 2.5.3p105 (2018-10-18 revision 65156) [x86_64-linux]\n\u001B[34m\u001B[1mCouchDB version\u001B[0m\ncouchdb 1.6.1\n\u001B[34m\u001B[1mElasticSearch version\u001B[0m\n5.5.0\n\u001B[34m\u001B[1mInstalled Firefox version\u001B[0m\nfirefox 63.0.1\n\u001B[34m\u001B[1mMongoDB version\u001B[0m\nMongoDB 4.0.7\n\u001B[34m\u001B[1mPhantomJS version\u001B[0m\n2.1.1\n\u001B[34m\u001B[1mPre-installed PostgreSQL versions\u001B[0m\n9.4.21\n9.5.16\n9.6.12\n\u001B[34m\u001B[1mRedis version\u001B[0m\nredis-server 5.0.4\n\u001B[34m\u001B[1mPre-installed Go versions\u001B[0m\n1.11.1\n\u001B[34m\u001B[1mmvn version\u001B[0m\nApache Maven 3.6.0 (97c98ec64a1fdfee7767ce5ffb20918da4f719f3; 2018-10-24T18:41:47Z)\n\u001B[34m\u001B[1mgradle version\u001B[0m\nGradle 4.10.2!\n\u001B[34m\u001B[1mlein version\u001B[0m\nLeiningen 2.9.1 on Java 11.0.2 OpenJDK 64-Bit Server VM\n\u001B[34m\u001B[1mPre-installed Node.js versions\u001B[0m\nv10.15.3\nv11.0.0\nv4.9.1\nv6.17.0\nv8.12.0\nv8.15.1\nv8.9\n\u001B[34m\u001B[1mphpenv versions\u001B[0m\n  system\n  5.6\n  5.6.40\n  7.1\n  7.1.27\n  7.2\n* 7.2.15 (set by /home/travis/.phpenv/version)\n  hhvm\n  hhvm-stable\n\u001B[34m\u001B[1mcomposer --version\u001B[0m\nComposer version 1.8.4 2019-02-11 10:52:10\n\u001B[34m\u001B[1mPre-installed Ruby versions\u001B[0m\nruby-2.3.8\nruby-2.4.5\nruby-2.5.3\ntravis_fold:end:system_info\n\u001B[0K\ntravis_time:end:01f5f45f:start=1572495220070505051,finish=1572495220077664668,duration=7159617,event=show_system_info\n\u001B[0Ktravis_time:start:0fb238c7\n\u001B[0Ktravis_time:end:0fb238c7:start=1572495220082098365,finish=1572495220115038323,duration=32939958,event=rm_riak_source\n\u001B[0Ktravis_time:start:0a54b39c\n\u001B[0Ktravis_time:end:0a54b39c:start=1572495220122849503,finish=1572495220133647249,duration=10797746,event=fix_rwky_redis\n\u001B[0Ktravis_time:start:067cf1ad\n\u001B[0Ktravis_time:end:067cf1ad:start=1572495220157551780,finish=1572495220584100681,duration=426548901,event=wait_for_network\n\u001B[0Ktravis_time:start:0f6c84fe\n\u001B[0Ktravis_time:end:0f6c84fe:start=1572495220594220200,finish=1572495220881698898,duration=287478698,event=update_apt_keys\n\u001B[0Ktravis_time:start:10fa4e8e\n\u001B[0Ktravis_time:end:10fa4e8e:start=1572495220888101536,finish=1572495220958420753,duration=70319217,event=fix_hhvm_source\n\u001B[0Ktravis_time:start:05570841\n\u001B[0Ktravis_time:end:05570841:start=1572495220966294311,finish=1572495220970295709,duration=4001398,event=update_mongo_arch\n\u001B[0Ktravis_time:start:0b702cb0\n\u001B[0Ktravis_time:end:0b702cb0:start=1572495220975877536,finish=1572495221032562867,duration=56685331,event=fix_sudo_enabled_trusty\n\u001B[0Ktravis_time:start:176fe083\n\u001B[0Ktravis_time:end:176fe083:start=1572495221039265481,finish=1572495221042723502,duration=3458021,event=update_glibc\n\u001B[0Ktravis_time:start:09220218\n\u001B[0Ktravis_time:end:09220218:start=1572495221050446101,finish=1572495221061938424,duration=11492323,event=clean_up_path\n\u001B[0Ktravis_time:start:186bb3ec\n\u001B[0Ktravis_time:end:186bb3ec:start=1572495221069491469,finish=1572495221080070942,duration=10579473,event=fix_resolv_conf\n\u001B[0Ktravis_time:start:103f9c8f\n\u001B[0Ktravis_time:end:103f9c8f:start=1572495221086628938,finish=1572495221098303094,duration=11674156,event=fix_etc_hosts\n\u001B[0Ktravis_time:start:12073e66\n\u001B[0Ktravis_time:end:12073e66:start=1572495221105774690,finish=1572495221117846733,duration=12072043,event=fix_mvn_settings_xml\n\u001B[0Ktravis_time:start:0165ddac\n\u001B[0Ktravis_time:end:0165ddac:start=1572495221125846712,finish=1572495221138518746,duration=12672034,event=no_ipv6_localhost\n\u001B[0Ktravis_time:start:2e16b740\n\u001B[0Ktravis_time:end:2e16b740:start=1572495221146868621,finish=1572495221150715431,duration=3846810,event=fix_etc_mavenrc\n\u001B[0Ktravis_time:start:32323260\n\u001B[0Ktravis_time:end:32323260:start=1572495221156698008,finish=1572495221160732326,duration=4034318,event=fix_wwdr_certificate\n\u001B[0Ktravis_time:start:0019157c\n\u001B[0Ktravis_time:end:0019157c:start=1572495221168308422,finish=1572495221201141908,duration=32833486,event=put_localhost_first\n\u001B[0Ktravis_time:start:01a16d45\n\u001B[0Ktravis_time:end:01a16d45:start=1572495221209368835,finish=1572495221213759264,duration=4390429,event=home_paths\n\u001B[0Ktravis_time:start:02216290\n\u001B[0Ktravis_time:end:02216290:start=1572495221221681468,finish=1572495221238772626,duration=17091158,event=disable_initramfs\n\u001B[0Ktravis_time:start:0b6517a0\n\u001B[0Ktravis_time:end:0b6517a0:start=1572495221244079355,finish=1572495221677124737,duration=433045382,event=disable_ssh_roaming\n\u001B[0Ktravis_time:start:1087a3d2\n\u001B[0Ktravis_time:end:1087a3d2:start=1572495221685874992,finish=1572495221689695324,duration=3820332,event=debug_tools\n\u001B[0Ktravis_time:start:0e38430a\n\u001B[0Ktravis_time:end:0e38430a:start=1572495221695284377,finish=1572495221699558382,duration=4274005,event=uninstall_oclint\n\u001B[0Ktravis_time:start:0389c250\n\u001B[0Ktravis_time:end:0389c250:start=1572495221705130220,finish=1572495221710324819,duration=5194599,event=rvm_use\n\u001B[0Ktravis_time:start:21cff2b2\n\u001B[0Ktravis_time:end:21cff2b2:start=1572495221718296949,finish=1572495221730091197,duration=11794248,event=rm_etc_boto_cfg\n\u001B[0Ktravis_time:start:0e21603d\n\u001B[0Ktravis_time:end:0e21603d:start=1572495221735057205,finish=1572495221739341689,duration=4284484,event=rm_oraclejdk8_symlink\n\u001B[0Ktravis_time:start:03cbc220\n\u001B[0Ktravis_time:end:03cbc220:start=1572495221744647004,finish=1572495221884280521,duration=139633517,event=enable_i386\n\u001B[0Ktravis_time:start:0f2be2c0\n\u001B[0Ktravis_time:end:0f2be2c0:start=1572495221891092534,finish=1572495221899801682,duration=8709148,event=update_rubygems\n\u001B[0Ktravis_time:start:19541dce\n\u001B[0Ktravis_time:end:19541dce:start=1572495221905536699,finish=1572495222975463883,duration=1069927184,event=ensure_path_components\n\u001B[0Ktravis_time:start:0a570b0b\n\u001B[0Ktravis_time:end:0a570b0b:start=1572495222982792031,finish=1572495222986536644,duration=3744613,event=redefine_curl\n\u001B[0Ktravis_time:start:1d74772e\n\u001B[0Ktravis_time:end:1d74772e:start=1572495222991759595,finish=1572495223126814498,duration=135054903,event=nonblock_pipe\n\u001B[0Ktravis_time:start:1e417de6\n\u001B[0Ktravis_time:end:1e417de6:start=1572495223134045180,finish=1572495226189567805,duration=3055522625,event=apt_get_update\n\u001B[0Ktravis_time:start:035f97f7\n\u001B[0Ktravis_time:end:035f97f7:start=1572495226194910955,finish=1572495226197897384,duration=2986429,event=deprecate_xcode_64\n\u001B[0Ktravis_time:start:03cf7e1c\n\u001B[0Ktravis_time:end:03cf7e1c:start=1572495226203852724,finish=1572495229177027053,duration=2973174329,event=update_heroku\n\u001B[0Ktravis_time:start:001e4d80\n\u001B[0Ktravis_time:end:001e4d80:start=1572495229182236880,finish=1572495229185482922,duration=3246042,event=shell_session_update\n\u001B[0Ktravis_time:start:06ce867c\n\u001B[0Ktravis_fold:start:docker_mtu\n\u001B[0Ktravis_fold:end:docker_mtu\n\u001B[0Ktravis_time:end:06ce867c:start=1572495229191007647,finish=1572495231594258644,duration=2403250997,event=set_docker_mtu\n\u001B[0Ktravis_time:start:0dfac013\n\u001B[0Ktravis_fold:start:resolvconf\n\u001B[0Ktravis_fold:end:resolvconf\n\u001B[0Ktravis_time:end:0dfac013:start=1572495231600199157,finish=1572495231687493315,duration=87294158,event=resolvconf\n\u001B[0Ktravis_time:start:06274c40\n\u001B[0Ktravis_time:end:06274c40:start=1572495231700496632,finish=1572495231902796052,duration=202299420,event=maven_central_mirror\n\u001B[0Ktravis_time:start:058079be\n\u001B[0Ktravis_time:end:058079be:start=1572495231910174426,finish=1572495231913983435,duration=3809009,event=fix_ps4\n\u001B[0Ktravis_time:start:001c58c4\n\u001B[0K\ntravis_fold:start:git.checkout\n\u001B[0Ktravis_time:start:14a991e7\n\u001B[0K$ git clone --depth=50 --branch=master https://github.com/RaoHai/react-ansi.git RaoHai/react-ansi\nCloning into 'RaoHai/react-ansi'...\ntravis_time:end:14a991e7:start=1572495231925868410,finish=1572495232662793567,duration=736925157,event=checkout\n\u001B[0K$ cd RaoHai/react-ansi\n$ git checkout -qf f455e0dd03dd125602cf424ab719ea3958be6695\ntravis_fold:end:git.checkout\n\u001B[0K\ntravis_time:end:14a991e7:start=1572495231925868410,finish=1572495232675955935,duration=750087525,event=checkout\n\u001B[0Ktravis_time:start:0709b2a6\n\u001B[0K\n\u001B[33;1mSetting environment variables from repository settings\u001B[0m\n$ export GH_TOKEN=[secure]\n$ export NPM_TOKEN=[secure]\n\ntravis_time:end:0709b2a6:start=1572495232681749845,finish=1572495232692010428,duration=10260583,event=env\n\u001B[0Ktravis_fold:start:nvm.install\n\u001B[0Ktravis_time:start:049be51c\n\u001B[0K$ nvm install 10\nDownloading and installing node v10.17.0...\nDownloading https://nodejs.org/dist/v10.17.0/node-v10.17.0-linux-x64.tar.xz...\nComputing checksum with sha256sum\nChecksums matched!\nNow using node v10.17.0 (npm v6.11.3)\ntravis_time:end:049be51c:start=1572495233737882338,finish=1572495237530719833,duration=3792837495,event=setup\n\u001B[0Ktravis_fold:end:nvm.install\n\u001B[0K\ntravis_fold:start:cache.1\n\u001B[0KSetting up build cache\n$ export CASHER_DIR=${TRAVIS_HOME}/.casher\ntravis_time:start:072bc818\n\u001B[0K$ Installing caching utilities\ntravis_time:end:072bc818:start=1572495239052129492,finish=1572495286956115242,duration=47903985750,event=setup_casher\n\u001B[0Ktravis_time:start:0dc214e4\n\u001B[0Ktravis_time:end:0dc214e4:start=1572495286962696702,finish=1572495286966516206,duration=3819504,event=setup_casher\n\u001B[0Ktravis_time:start:2370e7fb\n\u001B[0Kattempting to download cache archive\u001B[0m\n\u001B[32;1mfetching master/cache-linux-xenial-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855--node-10.tgz\u001B[0m\n\u001B[32;1mfound cache\u001B[0m\ntravis_time:end:2370e7fb:start=1572495286972043761,finish=1572495291245432755,duration=4273388994,event=setup_casher\n\u001B[0Ktravis_time:start:0acbeaac\n\u001B[0Ktravis_time:end:0acbeaac:start=1572495291254943208,finish=1572495291259708944,duration=4765736,event=setup_casher\n\u001B[0Ktravis_time:start:11d7bb79\n\u001B[0Kadding /home/travis/.npm to cache\u001B[0m\ntravis_time:end:11d7bb79:start=1572495291265198477,finish=1572495299803436746,duration=8538238269,event=setup_casher\n\u001B[0Ktravis_fold:end:cache.1\n\u001B[0K\ntravis_fold:start:cache.npm\n\u001B[0K\ntravis_time:start:1fe211bf\n\u001B[0Ktravis_time:end:1fe211bf:start=1572495300045390678,finish=1572495300049572097,duration=4181419,event=setup_cache\n\u001B[0Ktravis_time:start:04c9b94a\n\u001B[0Kadding /home/travis/build/RaoHai/react-ansi/node_modules to cache\u001B[0m\ncreating directory /home/travis/build/RaoHai/react-ansi/node_modules\u001B[0m\ntravis_time:end:04c9b94a:start=1572495300057225177,finish=1572495310017601508,duration=9960376331,event=setup_cache\n\u001B[0Ktravis_fold:end:cache.npm\n\u001B[0K$ node --version\nv10.17.0\n$ npm --version\n6.12.1\n$ nvm --version\n0.35.0\n\ntravis_fold:start:install.npm\n\u001B[0Ktravis_time:start:091795ce\n\u001B[0K$ npm install\n\n> react-ansi@0.0.0-development prepare /home/travis/build/RaoHai/react-ansi\n> npm run build\n\n\n> react-ansi@0.0.0-development build /home/travis/build/RaoHai/react-ansi\n> rollup -c\n\n\nsrc/index.tsx → dist/index.js, dist/index.es.js...\ncreated dist/index.js, dist/index.es.js in 4.6s\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN extract-text-webpack-plugin@3.0.2 requires a peer of webpack@^3.1.0 but none is installed. You must install peer dependencies yourself.\nnpm WARN html-webpack-plugin@2.29.0 requires a peer of webpack@1 || ^2 || ^2.1.0-beta || ^2.2.0-rc || ^3 but none is installed. You must install peer dependencies yourself.\nnpm WARN react-scripts-ts@2.17.0 requires a peer of typescript@2.x but none is installed. You must install peer dependencies yourself.\nnpm WARN fork-ts-checker-webpack-plugin@0.2.10 requires a peer of typescript@^2.1.0 but none is installed. You must install peer dependencies yourself.\nnpm WARN sw-precache-webpack-plugin@0.11.4 requires a peer of webpack@^1 || ^2 || ^2.1.0-beta || ^2.2.0-beta || ^3 but none is installed. You must install peer dependencies yourself.\nnpm WARN ts-jest@22.0.1 requires a peer of typescript@2.x but none is installed. You must install peer dependencies yourself.\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.1.1 (node_modules/chokidar/node_modules/fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.1: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"linux\",\"arch\":\"x64\"})\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.9 (node_modules/fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.9: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"linux\",\"arch\":\"x64\"})\n\naudited 116234 packages in 25.02s\nfound 102 vulnerabilities (76 low, 2 moderate, 24 high)\n  run `npm audit fix` to fix them, or `npm audit` for details\ntravis_time:end:091795ce:start=1572495311310011193,finish=1572495336882965542,duration=25572954349,event=install\n\u001B[0Ktravis_fold:end:install.npm\n\u001B[0K\ntravis_time:start:09e495c0\n\u001B[0K$ npm run test && npm run build\n\n> react-ansi@0.0.0-development test /home/travis/build/RaoHai/react-ansi\n> cross-env CI=1 react-scripts-ts test --env=jsdom\n\nPASS src/__tests__/index.test.tsx\n  react-ansi\n    ✓ should remnder (44ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        2.888s\nRan all test suites.\n\n> react-ansi@0.0.0-development build /home/travis/build/RaoHai/react-ansi\n> rollup -c\n\n\nsrc/index.tsx → dist/index.js, dist/index.es.js...\ncreated dist/index.js, dist/index.es.js in 4.5s\ntravis_time:end:09e495c0:start=1572495336891949060,finish=1572495347552622279,duration=10660673219,event=script\n\u001B[0K\u001B[32;1mThe command \"npm run test && npm run build\" exited with 0.\u001B[0m\ntravis_fold:start:cache.2\n\u001B[0Kstore build cache\ntravis_time:start:0895b850\n\u001B[0Ktravis_time:end:0895b850:start=1572495347559976150,finish=1572495347564249984,duration=4273834,event=cache\n\u001B[0Ktravis_time:start:033a927b\n\u001B[0K\u001B[32;1mchanges detected (content changed, file is created, or file is deleted):\n/home/travis/.npm/anonymous-cli-metrics.json\n/home/travis/.npm/_cacache/index-v5/34/8e/30c54cce758990bcd1b33114c4aa8a9e5a25c152ac39d9feab22b7e13e00\n/home/travis/.npm/_cacache/index-v5/cf/4b/00d89bfd0ac984d06a82cd31f98d8509bc0bf7eb452d723a00985ef6c590\n\u001B[0m\n\u001B[32;1mchanges detected, packing new archive\u001B[0m\n\u001B[32;1muploading master/cache-linux-xenial-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855--node-10.tgz\u001B[0m\n\u001B[32;1mcache uploaded\u001B[0m\ntravis_time:end:033a927b:start=1572495347570177205,finish=1572495371198652214,duration=23628475009,event=cache\n\u001B[0Ktravis_fold:end:cache.2\n\u001B[0K\ntravis_fold:start:after_success.1\n\u001B[0Ktravis_time:start:09292f9b\n\u001B[0K$ npm run travis-deploy-once \"npm run report-coverage\"\n\n> react-ansi@0.0.0-development travis-deploy-once /home/travis/build/RaoHai/react-ansi\n> travis-deploy-once \"npm run report-coverage\"\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n[Travis Deploy Once]: There is only one job for this build.\n\n> react-ansi@0.0.0-development report-coverage /home/travis/build/RaoHai/react-ansi\n> cat ./coverage/lcov.info | coveralls\n\nsh: 1: cat: ./coverage/lcov.info: No such file or directory\ncoveralls: not found\nnpm ERR! code ELIFECYCLE\nnpm ERR! syscall spawn\nnpm ERR! file sh\nnpm ERR! errno ENOENT\nnpm ERR! react-ansi@0.0.0-development report-coverage: `cat ./coverage/lcov.info | coveralls`\nnpm ERR! spawn ENOENT\nnpm ERR!\nnpm ERR! Failed at the react-ansi@0.0.0-development report-coverage script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /home/travis/.npm/_logs/2019-10-31T04_16_14_874Z-debug.log\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! react-ansi@0.0.0-development travis-deploy-once: `travis-deploy-once \"npm run report-coverage\"`\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the react-ansi@0.0.0-development travis-deploy-once script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /home/travis/.npm/_logs/2019-10-31T04_16_14_920Z-debug.log\ntravis_time:end:09292f9b:start=1572495371209114773,finish=1572495374941709963,duration=3732595190,event=after_success\n\u001B[0Ktravis_fold:end:after_success.1\n\u001B[0Ktravis_fold:start:after_success.2\n\u001B[0Ktravis_time:start:16be1868\n\u001B[0K$ if [ \"$TRAVIS_BRANCH\" = \"master\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then npm run travis-deploy-once \"npm run deploy-docs\"; fi\n\n> react-ansi@0.0.0-development travis-deploy-once /home/travis/build/RaoHai/react-ansi\n> travis-deploy-once \"npm run deploy-docs\"\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n[Travis Deploy Once]: There is only one job for this build.\n\n> react-ansi@0.0.0-development deploy-docs /home/travis/build/RaoHai/react-ansi\n> ts-node tools/gh-pages-publish\n\nsh: 1: ts-node: not found\nnpm ERR! code ELIFECYCLE\nnpm ERR! syscall spawn\nnpm ERR! file sh\nnpm ERR! errno ENOENT\nnpm ERR! react-ansi@0.0.0-development deploy-docs: `ts-node tools/gh-pages-publish`\nnpm ERR! spawn ENOENT\nnpm ERR!\nnpm ERR! Failed at the react-ansi@0.0.0-development deploy-docs script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /home/travis/.npm/_logs/2019-10-31T04_16_17_326Z-debug.log\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! react-ansi@0.0.0-development travis-deploy-once: `travis-deploy-once \"npm run deploy-docs\"`\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the react-ansi@0.0.0-development travis-deploy-once script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /home/travis/.npm/_logs/2019-10-31T04_16_17_360Z-debug.log\ntravis_time:end:16be1868:start=1572495374949929379,finish=1572495377377204108,duration=2427274729,event=after_success\n\u001B[0Ktravis_fold:end:after_success.2\n\u001B[0Ktravis_fold:start:after_success.3\n\u001B[0Ktravis_time:start:10004a26\n\u001B[0K$ if [ \"$TRAVIS_BRANCH\" = \"master\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then npm run travis-deploy-once \"npm run semantic-release\"; fi\n\n> react-ansi@0.0.0-development travis-deploy-once /home/travis/build/RaoHai/react-ansi\n> travis-deploy-once \"npm run semantic-release\"\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n\nWARNING: We noticed you're using the `useBuiltIns` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the `corejs` option.\n\nYou should also be sure that the version you pass to the `corejs` option matches the version specified in your `package.json`'s `dependencies` section. If it doesn't, you need to run one of the following commands:\n\n  npm install --save core-js@2    npm install --save core-js@3\n  yarn add core-js@2              yarn add core-js@3\n\n[Travis Deploy Once]: There is only one job for this build.\n\n> react-ansi@0.0.0-development semantic-release /home/travis/build/RaoHai/react-ansi\n> semantic-release\n\n[4:16:20 AM] [semantic-release] › ℹ  Running semantic-release version 15.13.28\n[4:16:20 AM] [semantic-release] › ✔  Loaded plugin \"verifyConditions\" from \"@semantic-release/npm\"\n[4:16:20 AM] [semantic-release] › ✔  Loaded plugin \"verifyConditions\" from \"@semantic-release/github\"\n[4:16:20 AM] [semantic-release] › ✔  Loaded plugin \"analyzeCommits\" from \"@semantic-release/commit-analyzer\"\n[4:16:20 AM] [semantic-release] › ✔  Loaded plugin \"generateNotes\" from \"@semantic-release/release-notes-generator\"\n[4:16:20 AM] [semantic-release] › ✔  Loaded plugin \"prepare\" from \"@semantic-release/npm\"\n[4:16:20 AM] [semantic-release] › ✔  Loaded plugin \"publish\" from \"@semantic-release/npm\"\n[4:16:20 AM] [semantic-release] › ✔  Loaded plugin \"publish\" from \"@semantic-release/github\"\n[4:16:20 AM] [semantic-release] › ✔  Loaded plugin \"success\" from \"@semantic-release/github\"\n[4:16:20 AM] [semantic-release] › ✔  Loaded plugin \"fail\" from \"@semantic-release/github\"\n[4:16:20 AM] [semantic-release] › ✔  Run automated release from branch master\n[4:16:21 AM] [semantic-release] › ✔  Allowed to push to the Git repository\n[4:16:21 AM] [semantic-release] › ℹ  Start step \"verifyConditions\" of plugin \"@semantic-release/npm\"\n[4:16:21 AM] [semantic-release] [@semantic-release/npm] › ℹ  Verify authentication for registry https://registry.npmjs.org/\n[4:16:21 AM] [semantic-release] [@semantic-release/npm] › ℹ  Wrote NPM_TOKEN to /tmp/e83e7f4884bd48756ff118ef196750b8/.npmrc\n[4:16:22 AM] [semantic-release] › ✔  Completed step \"verifyConditions\" of plugin \"@semantic-release/npm\"\n[4:16:22 AM] [semantic-release] › ℹ  Start step \"verifyConditions\" of plugin \"@semantic-release/github\"\n[4:16:22 AM] [semantic-release] [@semantic-release/github] › ℹ  Verify GitHub authentication\n[4:16:22 AM] [semantic-release] › ✔  Completed step \"verifyConditions\" of plugin \"@semantic-release/github\"\n[4:16:23 AM] [semantic-release] › ℹ  Found git tag v1.3.0 associated with version 1.3.0\n[4:16:23 AM] [semantic-release] › ℹ  Found 1 commits since last release\n[4:16:23 AM] [semantic-release] › ℹ  Start step \"analyzeCommits\" of plugin \"@semantic-release/commit-analyzer\"\n[4:16:23 AM] [semantic-release] [@semantic-release/commit-analyzer] › ℹ  Analyzing commit: Update README.md\n[4:16:23 AM] [semantic-release] [@semantic-release/commit-analyzer] › ℹ  The commit should not trigger a release\n[4:16:23 AM] [semantic-release] [@semantic-release/commit-analyzer] › ℹ  Analysis of 1 commits complete: no release\n[4:16:23 AM] [semantic-release] › ✔  Completed step \"analyzeCommits\" of plugin \"@semantic-release/commit-analyzer\"\n[4:16:23 AM] [semantic-release] › ℹ  There are no relevant changes, so no new version is released.\ntravis_time:end:10004a26:start=1572495377383019379,finish=1572495383374795667,duration=5991776288,event=after_success\n\u001B[0Ktravis_fold:end:after_success.3\n\u001B[0K\nDone. Your build exited with 0.\n\u001b[0;30mGray\u001b[0;0m\n\u001b[0;31mRed\u001b[0;0m\n\u001b[0;32mGreen\u001b[0;0m\n\u001b[0;33mYellow\u001b[0;0m\n\u001b[0;34mBlue\u001b[0;0m\n\u001b[0;35mPink\u001b[0;0m\n\u001b[0;36mCyan\u001b[0;0m\n\u001b[0;37mWhite\u001b[0;0m\n\u001b[0;40mFirefly dark blue background\u001b[0;0m\n\u001b[0;41mOrange background\u001b[0;0m\n\u001b[0;42mMarble blue background\u001b[0;0m\n\u001b[0;43mGreyish turquoise background\u001b[0;0m\n\u001b[0;44mGray background\u001b[0;0m\n\u001b[0;45mIndigo background\u001b[0;0m\n\u001b[0;46mLight gray background\u001b[0;0m\n\u001b[0;47mWhite background\u001b[0;0m\n"
}
